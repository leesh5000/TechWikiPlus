name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize
      - closed

env:
  AWS_REGION: ap-northeast-2
  NODE_VERSION: '20'
  DEPLOY_DIR: ~/techwikiplus/client/web
  PNPM_VERSION: '9'

jobs:
  # 코드 품질 검사 - ESLint
  lint:
    name: ESLint Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
          
      - name: Install dependencies
        working-directory: apps/frontend
        run: pnpm install --frozen-lockfile
          
      - name: Run ESLint
        id: eslint
        working-directory: apps/frontend
        run: |
          echo "## 🔍 ESLint 검사 시작" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # ESLint 실행 및 결과 캡처
          if pnpm run lint > eslint-output.txt 2>&1; then
            echo "### ✅ ESLint 검사 통과" >> $GITHUB_STEP_SUMMARY
            echo "코드 품질 검사를 성공적으로 통과했습니다." >> $GITHUB_STEP_SUMMARY
            echo "eslint_status=success" >> $GITHUB_OUTPUT
          else
            echo "### ❌ ESLint 오류 발견" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            tail -n 50 eslint-output.txt >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "eslint_status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          
      - name: ESLint Summary
        if: always()
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 항목 | 상태 |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| ESLint 검사 | ${{ steps.eslint.outputs.eslint_status == 'success' && '✅ 통과' || '❌ 실패' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 실행 시간 | $(date -u +"%Y-%m-%d %H:%M:%S UTC") |" >> $GITHUB_STEP_SUMMARY

  # TypeScript 타입 체크
  typecheck:
    name: TypeScript Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
          
      - name: Install dependencies
        working-directory: apps/frontend
        run: pnpm install --frozen-lockfile
          
      - name: Run TypeScript check
        id: typecheck
        working-directory: apps/frontend
        run: |
          echo "## 📘 TypeScript 타입 검사 시작" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # TypeScript 검사 실행
          if npx tsc --noEmit > tsc-output.txt 2>&1; then
            echo "### ✅ TypeScript 검사 통과" >> $GITHUB_STEP_SUMMARY
            echo "모든 타입이 올바르게 정의되어 있습니다." >> $GITHUB_STEP_SUMMARY
            echo "typecheck_status=success" >> $GITHUB_OUTPUT
          else
            echo "### ❌ TypeScript 타입 오류 발견" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`typescript" >> $GITHUB_STEP_SUMMARY
            cat tsc-output.txt | head -n 30 >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "typecheck_status=failed" >> $GITHUB_OUTPUT
            
            # 오류 개수 집계
            ERROR_COUNT=$(grep -c "error TS" tsc-output.txt || true)
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**총 ${ERROR_COUNT}개의 타입 오류가 발견되었습니다.**" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
      - name: TypeScript Summary
        if: always()
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 항목 | 상태 |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| TypeScript 검사 | ${{ steps.typecheck.outputs.typecheck_status == 'success' && '✅ 통과' || '❌ 실패' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 실행 시간 | $(date -u +"%Y-%m-%d %H:%M:%S UTC") |" >> $GITHUB_STEP_SUMMARY

  # 단위 테스트
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
          
      - name: Install dependencies
        working-directory: apps/frontend
        run: pnpm install --frozen-lockfile
          
      - name: Run tests
        id: test
        working-directory: apps/frontend
        run: |
          echo "## 🧪 테스트 실행" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # 테스트 실행
          if pnpm test -- --ci --coverage --maxWorkers=2 --json --outputFile=test-results.json > test-output.txt 2>&1; then
            echo "### ✅ 모든 테스트 통과" >> $GITHUB_STEP_SUMMARY
            echo "test_status=success" >> $GITHUB_OUTPUT
            
            # 테스트 결과 파싱
            if [ -f test-results.json ]; then
              TOTAL=$(jq '.numTotalTests' test-results.json)
              PASSED=$(jq '.numPassedTests' test-results.json)
              FAILED=$(jq '.numFailedTests' test-results.json)
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "| 테스트 결과 | 개수 |" >> $GITHUB_STEP_SUMMARY
              echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
              echo "| 총 테스트 | ${TOTAL} |" >> $GITHUB_STEP_SUMMARY
              echo "| 성공 | ${PASSED} |" >> $GITHUB_STEP_SUMMARY
              echo "| 실패 | ${FAILED} |" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### ❌ 테스트 실패" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            tail -n 50 test-output.txt >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "test_status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          
      - name: Coverage Report
        if: success()
        working-directory: apps/frontend
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 커버리지 리포트" >> $GITHUB_STEP_SUMMARY
          if [ -f coverage/coverage-summary.json ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| 항목 | 커버리지 |" >> $GITHUB_STEP_SUMMARY
            echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
            LINES=$(jq '.total.lines.pct' coverage/coverage-summary.json)
            STATEMENTS=$(jq '.total.statements.pct' coverage/coverage-summary.json)
            FUNCTIONS=$(jq '.total.functions.pct' coverage/coverage-summary.json)
            BRANCHES=$(jq '.total.branches.pct' coverage/coverage-summary.json)
            echo "| 라인 | ${LINES}% |" >> $GITHUB_STEP_SUMMARY
            echo "| 구문 | ${STATEMENTS}% |" >> $GITHUB_STEP_SUMMARY
            echo "| 함수 | ${FUNCTIONS}% |" >> $GITHUB_STEP_SUMMARY
            echo "| 분기 | ${BRANCHES}% |" >> $GITHUB_STEP_SUMMARY
          fi
        
      - name: Upload coverage reports
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: apps/frontend/coverage

  # 빌드 가능 여부 확인
  build-check:
    name: Build Verification
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
          
      - name: Install dependencies
        working-directory: apps/frontend
        run: pnpm install --frozen-lockfile
          
      - name: Build application
        id: build
        working-directory: apps/frontend
        run: |
          echo "## 🏭 빌드 검증" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # 빌드 시작 시간 기록
          BUILD_START=$(date +%s)
          
          # 빌드 실행
          if pnpm run build > build-output.txt 2>&1; then
            BUILD_END=$(date +%s)
            BUILD_TIME=$((BUILD_END - BUILD_START))
            
            echo "### ✅ 빌드 성공" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| 항목 | 값 |" >> $GITHUB_STEP_SUMMARY
            echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
            echo "| 빌드 시간 | ${BUILD_TIME}초 |" >> $GITHUB_STEP_SUMMARY
            echo "| 빌드 상태 | ✅ 성공 |" >> $GITHUB_STEP_SUMMARY
            
            # 빌드 결과 분석
            if [ -d .next ]; then
              BUILD_SIZE=$(du -sh .next | cut -f1)
              echo "| 빌드 크기 | ${BUILD_SIZE} |" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "build_status=success" >> $GITHUB_OUTPUT
          else
            echo "### ❌ 빌드 실패" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            tail -n 50 build-output.txt >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "build_status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          
      - name: Build Summary
        if: always()
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 빌드 요약" >> $GITHUB_STEP_SUMMARY
          echo "| 단계 | 상태 |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| 빌드 검증 | ${{ steps.build.outputs.build_status == 'success' && '✅ 통과' || '❌ 실패' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 실행 시간 | $(date -u +"%Y-%m-%d %H:%M:%S UTC") |" >> $GITHUB_STEP_SUMMARY

  # 보안 취약점 검사
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false
          
      - name: Install dependencies
        working-directory: apps/frontend
        run: pnpm install --frozen-lockfile
          
      - name: Run npm audit
        id: security
        working-directory: apps/frontend
        run: |
          echo "## 🔒 보안 취약점 검사" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # npm audit 실행
          pnpm audit --omit=dev --json > audit-results.json || true
          
          # 취약점 분석
          if [ -f audit-results.json ]; then
            TOTAL=$(jq '.metadata.vulnerabilities.total' audit-results.json)
            HIGH=$(jq '.metadata.vulnerabilities.high' audit-results.json)
            CRITICAL=$(jq '.metadata.vulnerabilities.critical' audit-results.json)
            MODERATE=$(jq '.metadata.vulnerabilities.moderate' audit-results.json)
            LOW=$(jq '.metadata.vulnerabilities.low' audit-results.json)
            
            echo "### 📊 보안 취약점 현황" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| 심각도 | 개수 | 상태 |" >> $GITHUB_STEP_SUMMARY
            echo "| --- | --- | --- |" >> $GITHUB_STEP_SUMMARY
            echo "| 크리티컬 | ${CRITICAL} | $([ $CRITICAL -eq 0 ] && echo '✅' || echo '🔴') |" >> $GITHUB_STEP_SUMMARY
            echo "| 높음 | ${HIGH} | $([ $HIGH -eq 0 ] && echo '✅' || echo '🟠') |" >> $GITHUB_STEP_SUMMARY
            echo "| 중간 | ${MODERATE} | $([ $MODERATE -eq 0 ] && echo '✅' || echo '🟡') |" >> $GITHUB_STEP_SUMMARY
            echo "| 낮음 | ${LOW} | $([ $LOW -eq 0 ] && echo '✅' || echo '🟢') |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**총 ${TOTAL}개의 취약점이 발견되었습니다.**" >> $GITHUB_STEP_SUMMARY
            
            # 크리티컬/높음 취약점이 있으면 실패
            if [ $CRITICAL -gt 0 ] || [ $HIGH -gt 0 ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### ⚠️ 주의: 높은 심각도의 취약점이 발견되었습니다!" >> $GITHUB_STEP_SUMMARY
              echo "security_status=failed" >> $GITHUB_OUTPUT
              exit 1
            else
              echo "security_status=success" >> $GITHUB_OUTPUT
            fi
          fi
          
      - name: Security Summary
        if: always()
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 항목 | 상태 |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| 보안 검사 | ${{ steps.security.outputs.security_status == 'success' && '✅ 통과' || '⚠️ 취약점 발견' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 실행 시간 | $(date -u +"%Y-%m-%d %H:%M:%S UTC") |" >> $GITHUB_STEP_SUMMARY
          
  # Docker 이미지 빌드
  docker-build:
    name: Build Docker Image
    needs: [lint, typecheck, test, build-check]
    runs-on: ubuntu-latest
    environment: AWS
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Docker Build Summary Start
        run: |
          echo "## 🐳 Docker 이미지 빌드" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 항목 | 값 |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| 이미지 태그 | latest, ${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 빌드 시작 | $(date -u +"%Y-%m-%d %H:%M:%S UTC") |" >> $GITHUB_STEP_SUMMARY
        
      - name: Build Docker image
        id: docker-build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: |
            ${{ secrets.ECR_REPOSITORY }}:latest
            ${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/docker-image.tar
          
      - name: Docker Build Result
        if: always()
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.docker-build.outcome }}" == "success" ]; then
            echo "### ✅ Docker 이미지 빌드 성공" >> $GITHUB_STEP_SUMMARY
            # 이미지 크기 확인
            if [ -f /tmp/docker-image.tar ]; then
              IMAGE_SIZE=$(du -h /tmp/docker-image.tar | cut -f1)
              echo "| 이미지 크기 | ${IMAGE_SIZE} |" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### ❌ Docker 이미지 빌드 실패" >> $GITHUB_STEP_SUMMARY
          fi
          echo "| 빌드 종료 | $(date -u +"%Y-%m-%d %H:%M:%S UTC") |" >> $GITHUB_STEP_SUMMARY
          
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/docker-image.tar
          retention-days: 1

  # ECR로 Docker 이미지 푸시
  docker-push:
    name: Push to ECR
    needs: docker-build
    runs-on: ubuntu-latest
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    environment: AWS
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check AWS credentials availability
        run: |
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ] || [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ] || [ -z "${{ secrets.ECR_REPOSITORY }}" ]; then
            echo "❌ Required environment secrets are not configured."
            echo "Please add the following secrets to your AWS environment:"
            echo "- AWS_ACCESS_KEY_ID"
            echo "- AWS_SECRET_ACCESS_KEY"
            echo "- ECR_REPOSITORY (e.g., 123456789012.dkr.ecr.ap-northeast-2.amazonaws.com/your-repo)"
            echo "Go to: Settings > Environments > AWS > Environment secrets"
            exit 1
          fi
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp
          
      - name: Load Docker image
        run: docker load -i /tmp/docker-image.tar
          
      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.ECR_REPOSITORY }}:latest
          docker push ${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
          
      - name: Create deployment summary
        run: |
          echo "## 🚀 Docker Image Push Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Image Details" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| **Repository** | \`${{ secrets.ECR_REPOSITORY }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Tags** | \`latest\`, \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Commit** | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Branch** | \`${{ github.ref_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Pushed At** | $(date -u +"%Y-%m-%d %H:%M:%S UTC") |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Deploy to ECS using the new image tag" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor application health after deployment" >> $GITHUB_STEP_SUMMARY

  # EC2 서버로 배포
  deploy:
    name: Deploy to EC2
    needs: docker-push
    runs-on: ubuntu-latest
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    environment: AWS
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
          
      - name: Create deployment directory on EC2
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << EOF
            mkdir -p ${{ env.DEPLOY_DIR }}
            cd ${{ env.DEPLOY_DIR }}
          EOF
          
      - name: Copy docker-compose files to EC2
        run: |
          scp -i ~/.ssh/id_rsa docker-compose.prod.yml ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:${{ env.DEPLOY_DIR }}/
          scp -i ~/.ssh/id_rsa .env.production.example ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:${{ env.DEPLOY_DIR }}/
          
      - name: Deploy application
        id: deploy
        run: |
          echo "## 🚀 EC2 배포 시작" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| 항목 | 값 |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| 대상 서버 | ${{ secrets.EC2_HOST }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 배포 디렉토리 | ${{ env.DEPLOY_DIR }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 이미지 태그 | ${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 배포 시작 | $(date -u +"%Y-%m-%d %H:%M:%S UTC") |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          DEPLOY_START=$(date +%s)
          
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << EOF
            cd ${{ env.DEPLOY_DIR }}
            
            echo "### 🔐 ECR 로그인"
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}
            
            # 환경 변수 설정
            export ECR_REPOSITORY=${{ secrets.ECR_REPOSITORY }}
            export IMAGE_TAG=${{ github.sha }}
            
            echo "### ⏹️ 기존 컨테이너 정지"
            docker compose -f docker-compose.prod.yml down || true
            
            echo "### 📥 새 이미지 다운로드"
            docker pull \${ECR_REPOSITORY}:\${IMAGE_TAG}
            
            echo "### ▶️ 새 컨테이너 시작"
            docker compose -f docker-compose.prod.yml up -d
            
            # 잠시 대기
            sleep 10
            
            # 헬스체크
            echo "### 🏥 헬스체크 수행"
            RETRY_COUNT=0
            MAX_RETRIES=30
            
            while [ \$RETRY_COUNT -lt \$MAX_RETRIES ]; do
              if curl -f http://localhost:3000 > /dev/null 2>&1; then
                echo "✅ 헬스체크 성공!"
                exit 0
              fi
              RETRY_COUNT=\$((RETRY_COUNT + 1))
              echo "재시도 \$RETRY_COUNT/\$MAX_RETRIES..."
              sleep 2
            done
            
            echo "❌ 헬스체크 실패"
            docker compose -f docker-compose.prod.yml logs --tail=50
            exit 1
          EOF
          
          DEPLOY_RESULT=$?
          DEPLOY_END=$(date +%s)
          DEPLOY_TIME=$((DEPLOY_END - DEPLOY_START))
          
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ $DEPLOY_RESULT -eq 0 ]; then
            echo "### ✅ 배포 성공" >> $GITHUB_STEP_SUMMARY
            echo "deploy_status=success" >> $GITHUB_OUTPUT
          else
            echo "### ❌ 배포 실패" >> $GITHUB_STEP_SUMMARY
            echo "deploy_status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "| 배포 시간 | ${DEPLOY_TIME}초 |" >> $GITHUB_STEP_SUMMARY
          echo "| 배포 종료 | $(date -u +"%Y-%m-%d %H:%M:%S UTC") |" >> $GITHUB_STEP_SUMMARY
          
      - name: Deployment summary
        run: |
          echo "## 🚀 Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| **Server** | \`${{ secrets.EC2_HOST }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Image** | \`${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Directory** | \`${{ env.DEPLOY_DIR }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Deployed At** | $(date -u +"%Y-%m-%d %H:%M:%S UTC") |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ⚠️ Post-Deployment Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. SSH into the server and verify the .env file is properly configured" >> $GITHUB_STEP_SUMMARY
          echo "2. Check application logs: \`docker compose -f docker-compose.prod.yml logs\`" >> $GITHUB_STEP_SUMMARY
          echo "3. Monitor application health" >> $GITHUB_STEP_SUMMARY