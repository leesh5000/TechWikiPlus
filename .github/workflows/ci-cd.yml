name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize
      - closed

env:
  AWS_REGION: ap-northeast-2
  NODE_VERSION: '20'

jobs:
  # 코드 품질 검사 - ESLint
  lint:
    name: ESLint Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'apps/frontend/package-lock.json'
          
      - name: Install dependencies
        working-directory: apps/frontend
        run: npm ci
          
      - name: Run ESLint
        working-directory: apps/frontend
        run: npm run lint

  # TypeScript 타입 체크
  typecheck:
    name: TypeScript Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'apps/frontend/package-lock.json'
          
      - name: Install dependencies
        working-directory: apps/frontend
        run: npm ci
          
      - name: Run TypeScript check
        working-directory: apps/frontend
        run: npx tsc --noEmit

  # 단위 테스트
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'apps/frontend/package-lock.json'
          
      - name: Install dependencies
        working-directory: apps/frontend
        run: npm ci
          
      - name: Run tests
        working-directory: apps/frontend
        run: npm test -- --ci --coverage --maxWorkers=2
        
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: apps/frontend/coverage

  # 빌드 가능 여부 확인
  build-check:
    name: Build Verification
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'apps/frontend/package-lock.json'
          
      - name: Install dependencies
        working-directory: apps/frontend
        run: npm ci
          
      - name: Build application
        working-directory: apps/frontend
        run: npm run build

  # 보안 취약점 검사
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'apps/frontend/package-lock.json'
          
      - name: Install dependencies
        working-directory: apps/frontend
        run: npm ci
          
      - name: Run npm audit
        working-directory: apps/frontend
        run: |
          npm audit --production
          echo "::warning::Security vulnerabilities found. Please review npm audit results."
          
  # Docker 이미지 빌드
  docker-build:
    name: Build Docker Image
    needs: [lint, typecheck, test, build-check]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: |
            ${{ secrets.ECR_REPOSITORY }}:latest
            ${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/docker-image.tar
          
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/docker-image.tar
          retention-days: 1

  # ECR로 Docker 이미지 푸시
  docker-push:
    name: Push to ECR
    needs: docker-build
    runs-on: ubuntu-latest
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    environment: AWS
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check AWS credentials availability
        run: |
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ] || [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ] || [ -z "${{ secrets.ECR_REPOSITORY }}" ]; then
            echo "❌ Required environment secrets are not configured."
            echo "Please add the following secrets to your AWS environment:"
            echo "- AWS_ACCESS_KEY_ID"
            echo "- AWS_SECRET_ACCESS_KEY"
            echo "- ECR_REPOSITORY (e.g., 123456789012.dkr.ecr.ap-northeast-2.amazonaws.com/your-repo)"
            echo "Go to: Settings > Environments > AWS > Environment secrets"
            exit 1
          fi
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp
          
      - name: Load Docker image
        run: docker load -i /tmp/docker-image.tar
          
      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.ECR_REPOSITORY }}:latest
          docker push ${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}
          
      - name: Create deployment summary
        run: |
          echo "## 🚀 Docker Image Push Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Image Details" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| **Repository** | \`${{ secrets.ECR_REPOSITORY }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Tags** | \`latest\`, \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Commit** | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Branch** | \`${{ github.ref_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Pushed At** | $(date -u +"%Y-%m-%d %H:%M:%S UTC") |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Deploy to ECS using the new image tag" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor application health after deployment" >> $GITHUB_STEP_SUMMARY

  # EC2 서버로 배포
  deploy:
    name: Deploy to EC2
    needs: docker-push
    runs-on: ubuntu-latest
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    environment: AWS
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
          
      - name: Create deployment directory on EC2
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'
            mkdir -p ~/techwikiplus-client-web
            cd ~/techwikiplus-client-web
          EOF
          
      - name: Copy docker-compose files to EC2
        run: |
          scp -i ~/.ssh/id_rsa docker-compose.prod.yml ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/techwikiplus-client-web/
          scp -i ~/.ssh/id_rsa .env.production.example ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/techwikiplus-client-web/
          
      - name: Deploy application
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd ~/techwikiplus-client-web
            
            # ECR 로그인
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}
            
            # 환경 변수 설정
            export ECR_REPOSITORY=${{ secrets.ECR_REPOSITORY }}
            export IMAGE_TAG=${{ github.sha }}
            
            # 기존 컨테이너 정지 및 제거
            docker compose -f docker-compose.prod.yml down || true
            
            # 새 이미지 pull
            docker pull ${ECR_REPOSITORY}:${IMAGE_TAG}
            
            # 컨테이너 시작
            docker compose -f docker-compose.prod.yml up -d
            
            # 잠시 대기
            sleep 10
            
            # 헬스체크
            if curl -f http://localhost:3000 > /dev/null 2>&1; then
              echo "✅ Deployment successful!"
            else
              echo "❌ Deployment failed - health check failed"
              docker compose -f docker-compose.prod.yml logs
              exit 1
            fi
          EOF
          
      - name: Deployment summary
        run: |
          echo "## 🚀 Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| **Server** | \`${{ secrets.EC2_HOST }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Image** | \`${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Directory** | \`~/techwikiplus-client-web\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Deployed At** | $(date -u +"%Y-%m-%d %H:%M:%S UTC") |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ⚠️ Post-Deployment Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. SSH into the server and verify the .env file is properly configured" >> $GITHUB_STEP_SUMMARY
          echo "2. Check application logs: \`docker compose -f docker-compose.prod.yml logs\`" >> $GITHUB_STEP_SUMMARY
          echo "3. Monitor application health" >> $GITHUB_STEP_SUMMARY